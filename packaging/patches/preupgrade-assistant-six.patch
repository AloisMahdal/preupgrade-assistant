diff --git a/preupg/application.py b/preupg/application.py
index 90e79ac..9976225 100644
--- a/preupg/application.py
+++ b/preupg/application.py
@@ -7,7 +7,6 @@ from __future__ import unicode_literals, print_function
 import shutil
 import datetime
 import os
-import six
 import logging
 from distutils import dir_util
 
@@ -220,7 +219,7 @@ class Application(object):
             DirHelper.check_or_create_temp_dir(dir_name)
 
         # Copy README files into proper directories
-        for key, val in six.iteritems(settings.readme_files):
+        for key, val in settings.readme_files.iteritems():
             shutil.copyfile(os.path.join(settings.source_dir, key),
                             os.path.join(self.conf.assessment_results_dir, val))
 
@@ -384,7 +383,7 @@ class Application(object):
         3rd party contents are stored in
         /usr/share/preupgrade/RHEL6_7/3rdparty directory
         """
-        for third_party, content in six.iteritems(list_contents(dir_name)):
+        for self.third_party, content in list_contents(dir_name).iteritems():
             third_party_name = self.third_party = third_party
             log_message("Execution {0} assessments:".format(third_party))
             self.report_parser.reload_xml(content)
@@ -516,7 +515,7 @@ class Application(object):
 
         # It prints out result in table format
         ScanningHelper.format_rules_to_table(main_report, "main contents")
-        for target, report in six.iteritems(self.report_data):
+        for target, report in self.report_data.iteritems():
             ScanningHelper.format_rules_to_table(report, "3rdparty content " + target)
 
         self.tar_ball_name = TarballHelper.tarball_result_dir(self.conf.tarball_name, self.conf.assessment_results_dir, self.conf.verbose)
@@ -558,7 +557,7 @@ class Application(object):
             pass
         if self.report_data:
             log_message('Summary of the third party providers:')
-            for target, dummy_report in six.iteritems(self.report_data):
+            for target, dummy_report in self.report_data.iteritems():
                 self.third_party = target
                 log_message("Read the third party content {0} {1} for more details.".
                             format(target, path))
@@ -608,7 +607,7 @@ class Application(object):
 
         logger_debug.debug(version_msg)
         if self.conf.list_contents_set:
-            for dir_name, dummy_content in six.iteritems(list_contents(self.conf.source_dir)):
+            for dir_name, dummy_content in list_contents(self.conf.source_dir).iteritems():
                 log_message("%s" % dir_name)
             return 0
 
diff --git a/preupg/creator/ui_helper.py b/preupg/creator/ui_helper.py
index f21c038..cef8a3a 100644
--- a/preupg/creator/ui_helper.py
+++ b/preupg/creator/ui_helper.py
@@ -8,7 +8,6 @@ import os
 import ConfigParser
 import shutil
 import sys
-import six
 
 from distutils.util import strtobool
 from preupg.utils import FileHelper, SystemIdentification
@@ -210,7 +209,7 @@ class UIHelper(object):
         """
         config = ConfigParser.RawConfigParser()
         config.add_section(section)
-        for key, val in six.iteritems(self.content_dict):
+        for key, val in self.content_dict.iteritems():
             if val is not None:
                 config.set(section, key, val)
 
diff --git a/preupg/kickstart/application.py b/preupg/kickstart/application.py
index 48d61e1..0a7c9a8 100644
--- a/preupg/kickstart/application.py
+++ b/preupg/kickstart/application.py
@@ -9,7 +9,6 @@ import base64
 import shutil
 import os
 import imp
-import six
 
 from pykickstart.constants import KS_MISSING_IGNORE, KS_SCRIPT_POST
 from pykickstart.parser import KickstartParser, KickstartError, Script
@@ -236,7 +235,7 @@ class KickstartGenerator(object):
             return None
         self.ks.handler.packages.excludedList = []
         self.plugin_classes = self.load_plugins(os.path.dirname(__file__))
-        for module in six.iterkeys(self.plugin_classes):
+        for module in self.plugin_classes.iterkeys():
             self.plugin_classes[module].run_module()
         self.ks.handler.packages.handleMissing = KS_MISSING_IGNORE
         self.ks.handler.keyboard.keyboard = 'us'
diff --git a/preupg/kickstart/plugins/packages.py b/preupg/kickstart/plugins/packages.py
index 3711241..43d0654 100644
--- a/preupg/kickstart/plugins/packages.py
+++ b/preupg/kickstart/plugins/packages.py
@@ -4,7 +4,6 @@
 Class creates a set of packages for migration scenario
 """
 
-import six
 import os
 
 from preupg.utils import FileHelper
@@ -24,7 +23,7 @@ class YumGroupManager(object):
     def find_match(self, packages):
         """is there a group whose packages are subset of argument 'packages'?"""
         groups = []
-        for group in six.itervalues(self.groups):
+        for group in self.groups.itervalues():
             if len(group.required) != 0:
                 if group.match(packages):
                     groups.append(group)
diff --git a/preupg/kickstart/plugins/partitioning.py b/preupg/kickstart/plugins/partitioning.py
index 5b1db02..b43be9d 100644
--- a/preupg/kickstart/plugins/partitioning.py
+++ b/preupg/kickstart/plugins/partitioning.py
@@ -4,7 +4,6 @@
 Class creates a kickstart for migration scenario
 """
 
-import six
 import os
 
 from pykickstart.constants import CLEARPART_TYPE_ALL
@@ -117,7 +116,7 @@ class PartitionGenerator(BaseKickstart):
                 if self.vg_info is None or not self.vg_info:
                     continue
                 try:
-                    vg_name = [x for x in six.iterkeys(self.vg_info) if device.startswith(x)][0]
+                    vg_name = [x for x in self.vg_info.iterkeys() if device.startswith(x)][0]
                 except IndexError:
                     return
                 # Get volume group name
@@ -127,7 +126,7 @@ class PartitionGenerator(BaseKickstart):
                 self.vol_group[vg_name]['pv_name'] = pv_name
                 if self.lvdisplay is None or not self.lvdisplay:
                     continue
-                lv_name = [x for x in six.iterkeys(self.lvdisplay) if x in device][0]
+                lv_name = [x for x in self.lvdisplay.iterkeys() if x in device][0]
                 if not self.logvol.has_key(mount):
                     self.logvol[mount] = {}
                 self.logvol[mount]['vgname'] = vg_name
@@ -135,7 +134,7 @@ class PartitionGenerator(BaseKickstart):
                 self.logvol[mount]['lv_name'] = lv_name
 
     def _get_part_devices(self):
-        for key, value in sorted(six.iteritems(self.part_dict)):
+        for key, value in sorted(self.part_dict.iteritems()):
             if value['crypt'] == "":
                 try:
                     self.parts.append(self.handler.PartData(size=value['size'], mountpoint=key, disk=value['device']))
@@ -145,17 +144,17 @@ class PartitionGenerator(BaseKickstart):
                 self.parts.append(self.handler.PartData(size=value['size'], mountpoint=key, encrypted=value['crypt']))
 
     def _get_logvol_device(self):
-        for key, value in sorted(six.iteritems(self.logvol)):
+        for key, value in sorted(self.logvol.iteritems()):
             self.lv_list.append(self.handler.LogVolData(name=value['lv_name'], vgname=value['vgname'],
                                                         size=value['size'], mountpoint=key))
 
     def _get_vg_device(self):
-        for key, value in six.iteritems(self.vol_group):
+        for key, value in self.vol_group.iteritems():
             pv_name = value['pv_name']
             self.vg_list.append(self.handler.VolGroupData(vgname=key, physvols=[pv_name], pesize=value['pesize']))
 
     def _get_raid_devices(self):
-        for key, value in six.iteritems(self.raid_devices):
+        for key, value in self.raid_devices.iteritems():
             level = value['level']
             members = []
             for index in value['raid_devices']:
diff --git a/preupg/kickstart/plugins/repos.py b/preupg/kickstart/plugins/repos.py
index 4309f6e..902bca1 100644
--- a/preupg/kickstart/plugins/repos.py
+++ b/preupg/kickstart/plugins/repos.py
@@ -4,7 +4,6 @@
 Class creates a set of packages for migration scenario
 """
 
-import six
 import os
 
 from preupg.utils import FileHelper
@@ -44,7 +43,7 @@ class ReposHandling(BaseKickstart):
 
     def update_repositories(self):
         if self.repos:
-            for key, value in six.iteritems(self.repos):
+            for key, value in self.repos.iteritems():
                 self.handler.repo.dataList().append(self.handler.RepoData(name=key, baseurl=value.strip()))
 
     def run_module(self, *args, **kwargs):
diff --git a/preupg/kickstart/plugins/users_groups.py b/preupg/kickstart/plugins/users_groups.py
index 7d8d96d..862134c 100644
--- a/preupg/kickstart/plugins/users_groups.py
+++ b/preupg/kickstart/plugins/users_groups.py
@@ -4,7 +4,6 @@
 Class appends users and groups to kickstart
 """
 
-import six
 import os
 
 from preupg import settings
@@ -41,8 +40,8 @@ class UsersGroupsGenerator(BaseKickstart):
             try:
                 user_group = []
                 if groups:
-                    for key, value in six.iteritems(groups):
-                        found = [x for x in six.itervalues(value) if fields[0] in x]
+                    for key, value in groups.iteritems():
+                        found = [x for x in value.itervalues() if fields[0] in x]
                         if found:
                             user_group.append(key)
                 user_dict[fields[0]] = {}
@@ -85,7 +84,7 @@ class UsersGroupsGenerator(BaseKickstart):
     def update_users(self, users):
         if not users:
             return None
-        for key, value in six.iteritems(users):
+        for key, value in users.iteritems():
             self.handler.user.dataList().append(self.handler.UserData(name=key,
                                                                       uid=int(value['uid']),
                                                                       gid=int(value['gid']),
@@ -96,8 +95,8 @@ class UsersGroupsGenerator(BaseKickstart):
     def update_groups(self, groups):
         if not groups:
             return None
-        for key, value in six.iteritems(groups):
-            for gid in six.iterkeys(value):
+        for key, value in groups.iteritems():
+            for gid in value.iteritems():
                 self.handler.group.dataList().append(self.handler.GroupData(name=key, gid=gid))
 
     def filter_kickstart_users(self):
@@ -106,12 +105,12 @@ class UsersGroupsGenerator(BaseKickstart):
             return None
         setup_passwd = UsersGroupsGenerator.get_kickstart_users('setup_passwd')
         uidgid = UsersGroupsGenerator.get_kickstart_users('uidgid', splitter='|')
-        for user, ids in six.iteritems(self.user_perm):
+        for user, ids in self.user_perm.iteritems():
             if setup_passwd:
-                if [x for x in six.iterkeys(setup_passwd) if user in x]:
+                if [x for x in setup_passwd.iterkeys() if user in x]:
                     continue
             if uidgid:
-                if [x for x in six.iterkeys(uidgid) if user in x]:
+                if [x for x in uidgid.iterkeys() if user in x]:
                     continue
             kickstart_users[user] = ids
         if not kickstart_users:
@@ -123,9 +122,9 @@ class UsersGroupsGenerator(BaseKickstart):
         if not self.group_perm:
             return None
         uidgid = UsersGroupsGenerator.get_kickstart_users('uidgid', splitter='|')
-        for group, ids in six.iteritems(self.group_perm):
+        for group, ids in self.group_perm.iteritems():
             if uidgid:
-                if [x for x in six.iterkeys(uidgid) if group in x]:
+                if [x for x in uidgid.iterkeys() if group in x]:
                     continue
             kickstart_groups[group] = ids
         if not kickstart_groups:
diff --git a/preupg/report_parser.py b/preupg/report_parser.py
index 3859f16..9d8eb2b 100644
--- a/preupg/report_parser.py
+++ b/preupg/report_parser.py
@@ -2,7 +2,6 @@ from __future__ import print_function, unicode_literals
 import re
 import os
 import shutil
-import six
 
 from preupg.utils import FileHelper
 from preupg.xccdf import XccdfHelper
@@ -410,7 +409,7 @@ class ReportParser(object):
 
         for child in self.get_nodes(self.target_tree, self.profile):
             last_child = child
-            for key, val in six.iteritems(xml_tags.GLOBAL_DIC_VALUES):
+            for key, val in xml_tags.GLOBAL_DIC_VALUES.iteritems():
                 if key == 'result_part':
                     continue
                 if key == "tmp_preupgrade":
diff --git a/preupg/utils.py b/preupg/utils.py
index b686fd7..60aeb25 100644
--- a/preupg/utils.py
+++ b/preupg/utils.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 from __future__ import print_function, unicode_literals
-import six
 import datetime
 import re
 import subprocess
@@ -91,7 +90,7 @@ class FileHelper(object):
         with open mode)
         """
         intern_mode = 0
-        if isinstance(mode, six.text_type):
+        if isinstance(mode, unicode):
             if 'w' in mode or 'a' in mode:
                 intern_mode += W_OK
             if 'r' in mode:
@@ -157,7 +156,7 @@ class FileHelper(object):
         script_types = {'/bin/bash': '.sh',
                         '/usr/bin/python': '.py',
                         '/usr/bin/perl': '.pl'}
-        inter = list(k for k, v in six.iteritems(script_types) if filename.endswith(v))
+        inter = list(k for k, v in script_types.iteritems() if filename.endswith(v))
         content = FileHelper.get_file_content(filename, 'rb')
         if inter and content.startswith('#!'+inter[0]):
             return inter
@@ -216,7 +215,7 @@ class FileHelper(object):
                     f.writelines(data)
                 else:
                     # TODO: May we should print warn w
-                    if encode_flag is True and isinstance(data, six.text_type):
+                    if encode_flag is True and isinstance(data, unicode):
                         f.write(data.encode(settings.defenc))
                     else:
                         f.write(data)
@@ -365,7 +364,7 @@ class ProcessHelper(object):
                               stderr=subprocess.STDOUT,
                               shell=shell,
                               bufsize=1)
-        stdout = six.binary_type() # FIXME should't be this bytes()?
+        stdout = str() # FIXME should't be this bytes()?
         for stdout_data in iter(sp.stdout.readline, b''):
             # communicate() method buffers everything in memory, we will read stdout directly
             stdout += stdout_data
@@ -769,7 +768,7 @@ class PostupgradeHelper(object):
         postupgrade_dict = {"copy_clean_conf.sh": "z_copy_clean_conf.sh",
                             "postupgrade_hooks.sh": "postupgrade_hooks.sh"}
 
-        for key, val in six.iteritems(postupgrade_dict):
+        for key, val in postupgrade_dict.iteritems():
             source_file = os.path.join(settings.data_dir,
                                        settings.postupgrade_dir, key)
             if os.path.exists(source_file):
diff --git a/preupg/xccdf.py b/preupg/xccdf.py
index d3e2589..4363cb8 100644
--- a/preupg/xccdf.py
+++ b/preupg/xccdf.py
@@ -3,7 +3,6 @@
 from __future__ import unicode_literals
 import re
 import os
-import six
 from operator import itemgetter
 from xml.etree import ElementTree
 
@@ -33,7 +32,7 @@ class XccdfHelper(object):
         }
 
         return_value = -1
-        for key, val in sorted(six.iteritems(risks), key=itemgetter(1), reverse=False):
+        for key, val in sorted(risks.iteritems(), key=itemgetter(1), reverse=False):
             matched = [x for x in inplace_risk if key in x]
             logger_report.debug(matched)
             if matched:
diff --git a/preupg/xml_manager.py b/preupg/xml_manager.py
index 92f3a94..0db550d 100644
--- a/preupg/xml_manager.py
+++ b/preupg/xml_manager.py
@@ -7,7 +7,6 @@ try:
     import rpm
 except ImportError:
     pass
-import six
 from preupg.utils import FileHelper
 from preupg import settings
 from preupg.logger import logger_report
@@ -259,7 +258,7 @@ class XmlManager(object):
         orig_file = os.path.join(self.dirname,
                                  result_name + "." + extension)
         lines = FileHelper.get_file_content(orig_file, "rb", method=True)
-        for dir_name, files in six.iteritems(solution_files):
+        for dir_name, files in solution_files.iteritems():
             section = dir_name.replace(os.path.join(self.dirname, self.scenario),
                                        "").replace("/", "_")
             solution_text = section + "_SOLUTION_MSG"
diff --git a/preupg/xmlgen/compose.py b/preupg/xmlgen/compose.py
index eb44f2a..e934c82 100644
--- a/preupg/xmlgen/compose.py
+++ b/preupg/xmlgen/compose.py
@@ -5,7 +5,6 @@ import re
 import datetime
 import shutil
 
-import six
 from distutils import dir_util
 
 from preupg.utils import FileHelper, SystemIdentification
@@ -113,7 +112,7 @@ class ComposeXML(object):
 
     @classmethod
     def perform_autoqa(cls, path_prefix, group_tree):
-        for f, t in six.iteritems(group_tree):
+        for f, t in group_tree.iteritems():
             b_subgroups = True
             try:
                 tree, subgroups = t
@@ -167,7 +166,7 @@ class ComposeXML(object):
 
     @classmethod
     def repath_group_xml_tree(cls, source_dir, new_base_dir, group_tree):
-        for f, t in six.iteritems(group_tree):
+        for f, t in group_tree.iteritems():
             tree, subgroups = t
 
             old_base_dir = os.path.join(source_dir, f)
@@ -192,7 +191,7 @@ class ComposeXML(object):
 
             return prefix, tree_key
 
-        for f in sorted(six.iterkeys(group_tree), key=lambda tree_key: get_sorting_key_for_tree(group_tree, tree_key)):
+        for f in sorted(group_tree.iterkeys(), key=lambda tree_key: get_sorting_key_for_tree(group_tree, tree_key)):
             t = group_tree[f]
             tree, subgroups = t
 
diff --git a/preupg/xmlgen/oscap_group_xml.py b/preupg/xmlgen/oscap_group_xml.py
index 075de9b..fc40369 100644
--- a/preupg/xmlgen/oscap_group_xml.py
+++ b/preupg/xmlgen/oscap_group_xml.py
@@ -6,7 +6,6 @@ So no change is needed from maintainer point of view
 
 from __future__ import print_function, unicode_literals
 import os
-import six
 import codecs
 
 try:
@@ -117,8 +116,8 @@ class OscapGroupXml(object):
             lines = FileHelper.get_file_content(file_list_rules, "rb", method=True)
         else:
             lines = []
-        for values in six.itervalues(self.loaded):
-            check_script = [v for k, v in six.iteritems(values[0]) if k == 'check_script']
+        for values in self.loaded.itervalues():
+            check_script = [v for k, v in values[0].iteritems() if k == 'check_script']
             if check_script:
                 check_script = os.path.splitext(''.join(check_script))[0]
                 lines.append(settings.xccdf_tag + rule_name + '_' + check_script + '\n')
diff --git a/preupg/xmlgen/xml_utils.py b/preupg/xmlgen/xml_utils.py
index 74fc69e..b98ed43 100644
--- a/preupg/xmlgen/xml_utils.py
+++ b/preupg/xmlgen/xml_utils.py
@@ -2,7 +2,6 @@ from __future__ import print_function, unicode_literals
 
 import re
 import os
-import six
 import copy
 
 from preupg.xml_manager import html_escape_string
@@ -40,13 +39,13 @@ class XmlUtils(object):
         allowed_tags = ['check_script', 'content_description', 'content_title', 'applies_to',
                         'author', 'binary_req', 'solution', 'bugzilla', 'config_file',
                         'group_title', 'mode', 'requires', 'solution_type']
-        for ini, content in six.iteritems(test_dict):
+        for ini, content in test_dict.iteritems():
             content_dict = content[0]
             for tag in allowed_tags:
                 if tag in content_dict:
                     del content_dict[tag]
             if content_dict:
-                tags = ','. join(six.iterkeys(content_dict))
+                tags = ','. join(content_dict.iterkeys())
                 MessageHelper.print_error_msg(title="The tag '%s' is not allowed in INI file %s." % (tags, ini),
                                               msg="\nAllowed tags for contents are %s" % ','.join(allowed_tags),
                                               level=' WARNING ')
@@ -332,7 +331,7 @@ class XmlUtils(object):
             self.update_values_list(self.rule, "{group_value}", ''.join(value_tag))
 
             try:
-                for k, function in six.iteritems(update_fnc):
+                for k, function in update_fnc.iteritems():
                     try:
                         function(key, k)
                     except IOError as e:
