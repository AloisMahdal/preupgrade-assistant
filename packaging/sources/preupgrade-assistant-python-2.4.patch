diff --git a/bin/premigrate b/bin/premigrate
index e377165..c8282b7 100755
--- a/bin/premigrate
+++ b/bin/premigrate
@@ -21,7 +21,7 @@ def main():
     else:
         try:
             ret = app.run()
-        except Exception as ex:
+        except Exception, ex:
             cli.parser.error(str(ex))
     return ret
 
diff --git a/preupg/application.py b/preupg/application.py
index 96401ee..f405131 100644
--- a/preupg/application.py
+++ b/preupg/application.py
@@ -4,11 +4,9 @@ The application module serves for running oscap binary and reporting results
 to UI.
 """
 
-from __future__ import unicode_literals, print_function
 import shutil
 import datetime
 import os
-import six
 import logging
 from distutils import dir_util
 
@@ -108,11 +106,12 @@ class Application(object):
         Add the special report log file
         :return:
         """
+        formatter = logging.Formatter("%(asctime)s %(filename)s"
+                                      ":%(lineno)s %(message)s")
         try:
             LoggerHelper.add_file_handler(logger_report,
                                           settings.preupg_report_log,
-                                          formatter=logging.Formatter("%(asctime)s %(filename)s"
-                                                                      ":%(lineno)s %(funcName)s: %(message)s"),
+                                          formatter=formatter,
                                           level=logging.DEBUG)
         except (IOError, OSError):
             logger.warning("Can not create report log '%s'", settings.preupg_report_log)
@@ -124,11 +123,12 @@ class Application(object):
         Add the special report log file
         :return:
         """
+        formatter = logging.Formatter("%(asctime)s %(levelname)s\t%(filename)s"
+                                      ":%(lineno)s %(message)s")
         try:
             LoggerHelper.add_file_handler(logger_debug,
                                           settings.preupg_log,
-                                          formatter=logging.Formatter("%(asctime)s %(levelname)s\t%(filename)s"
-                                                            ":%(lineno)s %(funcName)s: %(message)s"),
+                                          formatter=formatter,
                                           level=logging.DEBUG)
         except (IOError, OSError):
             logger.warning("Can not create debug log '%s'", settings.preupg_log)
@@ -154,7 +154,7 @@ class Application(object):
         if self.conf.upload is True:
             # lets try default configuration
             log_message('Specify the server where to upload the results.')
-            log_message(settings.ui_command.format(self.conf.results))
+            log_message(settings.ui_command % self.conf.results)
             return False
         else:
             if self.conf.upload[-1] == '/':
@@ -165,7 +165,7 @@ class Application(object):
         try:
             proxy = xmlrpclib.ServerProxy(url)
             proxy.submit.ping()
-        except Exception as ex:
+        except Exception, ex:
             message = 'Can\'t connect to preupgrade assistant WEB-UI at %s.\n\n' \
                       'Please ensure that package preupgrade-assistant-ui ' \
                       'has been installed on target system and firewall is set up ' \
@@ -221,7 +221,7 @@ class Application(object):
             DirHelper.check_or_create_temp_dir(dir_name)
 
         # Copy README files into proper directories
-        for key, val in six.iteritems(settings.readme_files):
+        for key, val in settings.readme_files.iteritems():
             shutil.copyfile(os.path.join(settings.source_dir, key),
                             os.path.join(self.conf.assessment_results_dir, val))
 
@@ -385,9 +385,9 @@ class Application(object):
         3rd party contents are stored in
         /usr/share/preupgrade/RHEL6_7/3rdparty directory
         """
-        for third_party, content in six.iteritems(list_contents(dir_name)):
+        for self.third_party, content in list_contents(dir_name).iteritems():
             third_party_name = self.third_party = third_party
-            log_message("Execution {0} assessments:".format(third_party))
+            log_message("Execution %s assessments:" % self.third_party)
             self.report_parser.reload_xml(content)
             self.content = content
             self.run_scan_process()
@@ -398,7 +398,7 @@ class Application(object):
 
     def get_cmd_convertor(self):
         """Function returns cmd with text convertor string"""
-        cmd = settings.text_converters[self.text_convertor].format(
+        cmd = settings.text_converters[self.text_convertor] % (
             self.text_convertor,
             self.openscap_helper.get_default_html_result_path(),
             self.openscap_helper.get_default_txt_result_path()
@@ -480,7 +480,7 @@ class Application(object):
         try:
             self.report_parser = ReportParser(self.content)
         except IOError:
-            log_message("The module {0} does not exist.".format(self.content))
+            log_message("The module %s does not exist" % self.content)
             return ReturnValues.SCENARIO
         if not self.conf.contents:
             version = SystemIdentification.get_assessment_version(self.conf.scan)
@@ -517,7 +517,7 @@ class Application(object):
 
         # It prints out result in table format
         ScanningHelper.format_rules_to_table(main_report, "main contents")
-        for target, report in six.iteritems(self.report_data):
+        for target, report in self.report_data.iteritems():
             ScanningHelper.format_rules_to_table(report, "3rdparty content " + target)
 
         self.tar_ball_name = TarballHelper.tarball_result_dir(self.conf.tarball_name, self.conf.assessment_results_dir, self.conf.verbose)
@@ -528,20 +528,18 @@ class Application(object):
 
     def summary_report(self, tarball_path):
         """Function prints a summary report"""
-        command = settings.ui_command.format(tarball_path)
+        command = settings.ui_command % tarball_path
         if self.conf.text:
             path = self.openscap_helper.get_default_txt_result_path()
         else:
             path = self.openscap_helper.get_default_html_result_path()
 
         report_dict = {
-            0: settings.message.format(path),
-            1: settings.message.format(path),
-            2: 'We found some critical issues. In-place upgrade is not advised.\n' +
-            "Read the file {0} for more details.".
-            format(path),
+            0: settings.message % path,
+            1: settings.message % path,
+            2: 'We found some critical issues. In-place upgrade is not advised.\n' + "Read the file %s for more details." % path,
             3: 'We found some error issues. In-place upgrade is not advised.\n' +
-               "Read the file {0} for more details.".format(path)
+               "Read the file %s for more details."% path
 
         }
         self.report_return_value = XccdfHelper.check_inplace_risk(self.openscap_helper.get_default_xml_result_path(), 0)
@@ -559,11 +557,10 @@ class Application(object):
             pass
         if self.report_data:
             log_message('Summary of the third party providers:')
-            for target, dummy_report in six.iteritems(self.report_data):
+            for target, dummy_report in self.report_data.iteritems():
                 self.third_party = target
-                log_message("Read the third party content {0} {1} for more details.".
-                            format(target, path))
-        log_message("Upload results to UI by the command:\ne.g. {0} .".format(command))
+                log_message("Read the 3rd party content %s %s for more details." % (target, path))
+        log_message("Upload results to UI by command:\ne.g. %s ." % command)
 
     def _set_devel_mode(self):
         # Check for devel_mode
@@ -610,7 +607,7 @@ class Application(object):
 
         logger_debug.debug(version_msg)
         if self.conf.list_contents_set:
-            for dir_name, dummy_content in six.iteritems(list_contents(self.conf.source_dir)):
+            for dir_name, dummy_content in list_contents(self.conf.source_dir).iteritems():
                 log_message("%s" % dir_name)
             return 0
 
@@ -667,11 +664,11 @@ class Application(object):
                     found = True
                     break
             if not found:
-                log_message(settings.converter_message.format(' '.join(SystemIdentification.get_convertors())))
+                log_message(settings.converter_message % (' '.join(SystemIdentification.get_convertors())))
                 return ReturnValues.MISSING_TEXT_CONVERTOR
 
         if os.geteuid() != 0:
-            print("Need to be root", end="\n")
+            print "Need to be root"
             if not self.conf.debug:
                 return ReturnValues.ROOT
 
diff --git a/preupg/cli.py b/preupg/cli.py
index 5858db8..150bba7 100644
--- a/preupg/cli.py
+++ b/preupg/cli.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 
-from __future__ import print_function, unicode_literals
 import optparse
 from optparse import OptionValueError
 
@@ -204,11 +203,6 @@ class CLI(object):
                 % ", ".join(settings.migration_options)
             )
         )
-        self.parser.add_option(
-            "--old-report-style",
-            action="store_true",
-            help="Generate report with simpler style than the default."
-        )
 
 
 if __name__ == '__main__':
diff --git a/preupg/common.py b/preupg/common.py
index 60286ae..4424bba 100644
--- a/preupg/common.py
+++ b/preupg/common.py
@@ -4,7 +4,6 @@ generating common logs, coping these common logs
 to assessment
 """
 
-from __future__ import unicode_literals
 import os
 import platform
 import datetime
diff --git a/preupg/conf.py b/preupg/conf.py
index 43bec13..b76c21d 100644
--- a/preupg/conf.py
+++ b/preupg/conf.py
@@ -1,7 +1,5 @@
 # -*- coding: utf-8 -*-
 
-from __future__ import unicode_literals
-
 class DummyConf(object):
     """
     Dummy conf class for Conf
diff --git a/preupg/creator/ui_helper.py b/preupg/creator/ui_helper.py
index f21c038..cf9344f 100644
--- a/preupg/creator/ui_helper.py
+++ b/preupg/creator/ui_helper.py
@@ -8,7 +8,6 @@ import os
 import ConfigParser
 import shutil
 import sys
-import six
 
 from distutils.util import strtobool
 from preupg.utils import FileHelper, SystemIdentification
@@ -30,9 +29,9 @@ def get_user_input(message, default_yes=True, any_input=False):
     choice = '[Y/n]'
 
     if any_input:
-        msg = '{0} '.format(message)
+        msg = '%s ' % message
     else:
-        msg = '{0} {1}? '.format(message, choice)
+        msg = '%s %s? ' % (message, choice)
 
     while True:
         if int(sys.version_info[0]) == 2:
@@ -210,7 +209,7 @@ class UIHelper(object):
         """
         config = ConfigParser.RawConfigParser()
         config.add_section(section)
-        for key, val in six.iteritems(self.content_dict):
+        for key, val in self.content_dict.iteritems():
             if val is not None:
                 config.set(section, key, val)
 
diff --git a/preupg/kickstart/application.py b/preupg/kickstart/application.py
index d364cb6..91db549 100644
--- a/preupg/kickstart/application.py
+++ b/preupg/kickstart/application.py
@@ -1,6 +1,4 @@
 # -*- coding: utf-8 -*-
-from __future__ import print_function, unicode_literals
-
 """
 Class creates a kickstart for migration scenario
 """
@@ -9,7 +7,6 @@ import base64
 import shutil
 import os
 import imp
-import six
 
 from pykickstart.constants import KS_MISSING_IGNORE, KS_SCRIPT_POST
 from pykickstart.parser import KickstartParser, KickstartError, Script
@@ -52,11 +49,12 @@ class KickstartGenerator(object):
         Add the special report log file
         :return:
         """
+        formatter = logging.Formatter("%(asctime)s %(levelname)s\t%(filename)s"
+                                      ":%(lineno)s %(message)s")
         try:
             LoggerHelper.add_file_handler(logger_debug,
                                           settings.preupg_log,
-                                          formatter=logging.Formatter("%(asctime)s %(levelname)s\t%(filename)s"
-                                                            ":%(lineno)s %(funcName)s: %(message)s"),
+                                          formatter=formatter,
                                           level=logging.DEBUG)
         except (IOError, OSError):
             logger.warning("Can not create debug log '%s'", settings.preupg_log)
@@ -87,7 +85,7 @@ class KickstartGenerator(object):
                     for i in injs:
                         obj = i(self.ks.handler)
                         plugin_checkers[modname] = obj
-                except AttributeError as ae:
+                except AttributeError, ae:
                     print (ae)
                     print ("Module '%s' does not implement `register(context)`" % modname)
         return plugin_checkers
@@ -153,7 +151,7 @@ class KickstartGenerator(object):
             return
         script_str = FileHelper.get_file_content(os.path.join(settings.KS_DIR, script_path), 'rb')
         if not script_str:
-            log_message("Cannot open the script template: {0}.".format(script_path))
+            log_message("Cannot open the script template: %s." % script_path)
             return
         if tarball_content is not None:
             script_str = script_str.replace('{tar_ball}', base64.b64encode(tarball_content))
@@ -237,7 +235,7 @@ class KickstartGenerator(object):
             return None
         self.ks.handler.packages.excludedList = []
         self.plugin_classes = self.load_plugins(os.path.dirname(__file__))
-        for module in six.iterkeys(self.plugin_classes):
+        for module in self.plugin_classes.iterkeys():
             self.plugin_classes[module].run_module()
         self.ks.handler.packages.handleMissing = KS_MISSING_IGNORE
         self.ks.handler.keyboard.keyboard = 'us'
diff --git a/preupg/kickstart/plugins/packages.py b/preupg/kickstart/plugins/packages.py
index 2b7f6b8..f8ebbc0 100644
--- a/preupg/kickstart/plugins/packages.py
+++ b/preupg/kickstart/plugins/packages.py
@@ -4,7 +4,6 @@
 Class creates a set of packages for migration scenario
 """
 
-import six
 import os
 
 from preupg.utils import FileHelper
@@ -24,7 +23,7 @@ class YumGroupManager(object):
     def find_match(self, packages):
         """is there a group whose packages are subset of argument 'packages'?"""
         groups = []
-        for group in six.itervalues(self.groups):
+        for group in self.groups.itervalues():
             if len(group.required) != 0:
                 if group.match(packages):
                     groups.append(group)
diff --git a/preupg/kickstart/plugins/partitioning.py b/preupg/kickstart/plugins/partitioning.py
index 5b1db02..b43be9d 100644
--- a/preupg/kickstart/plugins/partitioning.py
+++ b/preupg/kickstart/plugins/partitioning.py
@@ -4,7 +4,6 @@
 Class creates a kickstart for migration scenario
 """
 
-import six
 import os
 
 from pykickstart.constants import CLEARPART_TYPE_ALL
@@ -117,7 +116,7 @@ class PartitionGenerator(BaseKickstart):
                 if self.vg_info is None or not self.vg_info:
                     continue
                 try:
-                    vg_name = [x for x in six.iterkeys(self.vg_info) if device.startswith(x)][0]
+                    vg_name = [x for x in self.vg_info.iterkeys() if device.startswith(x)][0]
                 except IndexError:
                     return
                 # Get volume group name
@@ -127,7 +126,7 @@ class PartitionGenerator(BaseKickstart):
                 self.vol_group[vg_name]['pv_name'] = pv_name
                 if self.lvdisplay is None or not self.lvdisplay:
                     continue
-                lv_name = [x for x in six.iterkeys(self.lvdisplay) if x in device][0]
+                lv_name = [x for x in self.lvdisplay.iterkeys() if x in device][0]
                 if not self.logvol.has_key(mount):
                     self.logvol[mount] = {}
                 self.logvol[mount]['vgname'] = vg_name
@@ -135,7 +134,7 @@ class PartitionGenerator(BaseKickstart):
                 self.logvol[mount]['lv_name'] = lv_name
 
     def _get_part_devices(self):
-        for key, value in sorted(six.iteritems(self.part_dict)):
+        for key, value in sorted(self.part_dict.iteritems()):
             if value['crypt'] == "":
                 try:
                     self.parts.append(self.handler.PartData(size=value['size'], mountpoint=key, disk=value['device']))
@@ -145,17 +144,17 @@ class PartitionGenerator(BaseKickstart):
                 self.parts.append(self.handler.PartData(size=value['size'], mountpoint=key, encrypted=value['crypt']))
 
     def _get_logvol_device(self):
-        for key, value in sorted(six.iteritems(self.logvol)):
+        for key, value in sorted(self.logvol.iteritems()):
             self.lv_list.append(self.handler.LogVolData(name=value['lv_name'], vgname=value['vgname'],
                                                         size=value['size'], mountpoint=key))
 
     def _get_vg_device(self):
-        for key, value in six.iteritems(self.vol_group):
+        for key, value in self.vol_group.iteritems():
             pv_name = value['pv_name']
             self.vg_list.append(self.handler.VolGroupData(vgname=key, physvols=[pv_name], pesize=value['pesize']))
 
     def _get_raid_devices(self):
-        for key, value in six.iteritems(self.raid_devices):
+        for key, value in self.raid_devices.iteritems():
             level = value['level']
             members = []
             for index in value['raid_devices']:
diff --git a/preupg/kickstart/plugins/repos.py b/preupg/kickstart/plugins/repos.py
index 4309f6e..902bca1 100644
--- a/preupg/kickstart/plugins/repos.py
+++ b/preupg/kickstart/plugins/repos.py
@@ -4,7 +4,6 @@
 Class creates a set of packages for migration scenario
 """
 
-import six
 import os
 
 from preupg.utils import FileHelper
@@ -44,7 +43,7 @@ class ReposHandling(BaseKickstart):
 
     def update_repositories(self):
         if self.repos:
-            for key, value in six.iteritems(self.repos):
+            for key, value in self.repos.iteritems():
                 self.handler.repo.dataList().append(self.handler.RepoData(name=key, baseurl=value.strip()))
 
     def run_module(self, *args, **kwargs):
diff --git a/preupg/kickstart/plugins/users_groups.py b/preupg/kickstart/plugins/users_groups.py
index 7d8d96d..4dc8a93 100644
--- a/preupg/kickstart/plugins/users_groups.py
+++ b/preupg/kickstart/plugins/users_groups.py
@@ -4,7 +4,6 @@
 Class appends users and groups to kickstart
 """
 
-import six
 import os
 
 from preupg import settings
@@ -41,8 +40,8 @@ class UsersGroupsGenerator(BaseKickstart):
             try:
                 user_group = []
                 if groups:
-                    for key, value in six.iteritems(groups):
-                        found = [x for x in six.itervalues(value) if fields[0] in x]
+                    for key, value in groups.iteritems():
+                        found = [x for x in value.itervalues() if fields[0] in x]
                         if found:
                             user_group.append(key)
                 user_dict[fields[0]] = {}
@@ -85,7 +84,7 @@ class UsersGroupsGenerator(BaseKickstart):
     def update_users(self, users):
         if not users:
             return None
-        for key, value in six.iteritems(users):
+        for key, value in users.iteritems():
             self.handler.user.dataList().append(self.handler.UserData(name=key,
                                                                       uid=int(value['uid']),
                                                                       gid=int(value['gid']),
@@ -96,8 +95,8 @@ class UsersGroupsGenerator(BaseKickstart):
     def update_groups(self, groups):
         if not groups:
             return None
-        for key, value in six.iteritems(groups):
-            for gid in six.iterkeys(value):
+        for key, value in groups.iteritems():
+            for gid in value.iterkeys():
                 self.handler.group.dataList().append(self.handler.GroupData(name=key, gid=gid))
 
     def filter_kickstart_users(self):
@@ -106,12 +105,12 @@ class UsersGroupsGenerator(BaseKickstart):
             return None
         setup_passwd = UsersGroupsGenerator.get_kickstart_users('setup_passwd')
         uidgid = UsersGroupsGenerator.get_kickstart_users('uidgid', splitter='|')
-        for user, ids in six.iteritems(self.user_perm):
+        for user, ids in self.user_perm.iteritems():
             if setup_passwd:
-                if [x for x in six.iterkeys(setup_passwd) if user in x]:
+                if [x for x in setup_passwd.iterkeys() if user in x]:
                     continue
             if uidgid:
-                if [x for x in six.iterkeys(uidgid) if user in x]:
+                if [x for x in uidgid.iterkeys() if user in x]:
                     continue
             kickstart_users[user] = ids
         if not kickstart_users:
@@ -123,9 +122,9 @@ class UsersGroupsGenerator(BaseKickstart):
         if not self.group_perm:
             return None
         uidgid = UsersGroupsGenerator.get_kickstart_users('uidgid', splitter='|')
-        for group, ids in six.iteritems(self.group_perm):
+        for group, ids in self.group_perm.iteritems():
             if uidgid:
-                if [x for x in six.iterkeys(uidgid) if group in x]:
+                if [x for x in uidgid.iterkeys() if group in x]:
                     continue
             kickstart_groups[group] = ids
         if not kickstart_groups:
diff --git a/preupg/logger.py b/preupg/logger.py
index 8f12b78..349e402 100644
--- a/preupg/logger.py
+++ b/preupg/logger.py
@@ -1,5 +1,4 @@
 
-from __future__ import unicode_literals, print_function
 import logging
 import sys
 from preupg import settings
@@ -60,32 +59,22 @@ logger_report = LoggerHelper.get_basic_logger('preupgrade-assistant-report', log
 
 def log_message(message, new_line=True, level=logging.INFO):
     """ if verbose, log `msg % args` to stdout """
-    if int(sys.version_info[0]) == 2:
-        sys.stdout.write(message.encode(settings.defenc))
-        sys.stdout.flush()
-        # This is used in case that we do not want to print the new line
-        if new_line:
-            sys.stdout.write("\n")
-            sys.stdout.flush()
-    else:
-        endline = "\n" if new_line else ""
-        print(message, end=endline, file=sys.stdout, flush=True)
+    sys.stdout.write(message.encode(settings.defenc))
+    # This is used in case that we do not want to print the new line
+    if new_line:
+        sys.stdout.write("\n")
+    sys.stdout.flush()
 
     logger_debug.log(level, message)
 
 
 def log_report_message(message, new_line=True, level=logging.INFO):
     """ if verbose, log `msg % args` to stdout """
-    if int(sys.version_info[0]) == 2:
-        sys.stdout.write(message.encode(settings.defenc))
-        sys.stdout.flush()
-        # This is used in case that we do not want to print the new line
-        if new_line:
-            sys.stdout.write("\n")
-            sys.stdout.flush()
-    else:
-        endline = "\n" if new_line else ""
-        print(message, end=endline, file=sys.stdout, flush=True)
+    sys.stdout.write(message.encode(settings.defenc))
+    # This is used in case that we do not want to print the new line
+    if new_line:
+        sys.stdout.write("\n")
+    sys.stdout.flush()
 
     logger_report.log(level, message)
 
diff --git a/preupg/report_parser.py b/preupg/report_parser.py
index ce04484..65ffad7 100644
--- a/preupg/report_parser.py
+++ b/preupg/report_parser.py
@@ -1,8 +1,6 @@
-from __future__ import print_function, unicode_literals
 import re
 import os
 import shutil
-import six
 
 from preupg.utils import FileHelper
 from preupg.xccdf import XccdfHelper
@@ -212,9 +210,9 @@ class ReportParser(object):
                 res.text = ReportHelper.get_needs_action()
             for index, row in enumerate(scanning_progress.output_data):
                 if self.get_nodes_text(rule, "title") in row:
-                    scanning_progress.output_data[index] = "{0}:{1}".format(
-                        self.get_nodes_text(rule, "title"),
-                        res.text)
+                    scanning_progress.output_data[index] = \
+                        "%s:%s" % (self.get_nodes_text(rule, "title"),
+                                   res.text)
 
     def replace_inplace_risk(self, scanning_results=None):
         """
@@ -409,7 +407,7 @@ class ReportParser(object):
 
         for child in self.get_nodes(self.target_tree, self.profile):
             last_child = child
-            for key, val in six.iteritems(xml_tags.GLOBAL_DIC_VALUES):
+            for key, val in xml_tags.GLOBAL_DIC_VALUES.iteritems():
                 if key == 'result_part':
                     continue
                 if key == "tmp_preupgrade":
diff --git a/preupg/scanning.py b/preupg/scanning.py
index f107f36..7bccafc 100644
--- a/preupg/scanning.py
+++ b/preupg/scanning.py
@@ -1,5 +1,4 @@
 
-from __future__ import unicode_literals
 import os
 from preupg.logger import settings, logger_report, log_message, logging
 
@@ -36,7 +35,7 @@ class ScanningHelper(object):
             return
         max_title_length = max(x for x in [len(l.split(':')[0]) for l in output_data]) + 5
         max_result_length = max(x for x in [len(l.split(':')[2]) for l in output_data]) + 2
-        log_message(settings.result_text.format(content))
+        log_message(settings.result_text % content)
         message = '-' * (max_title_length + max_result_length + 4)
         log_message(message)
         for data in sorted(output_data, key=ScanningHelper.compare_data, reverse=True):
@@ -98,7 +97,7 @@ class ScanProgress(object):
         except ValueError:
             print (stdout_data)
             return
-        self.output_data.append(u'{0}:{1}'.format(self.names[xccdf_rule], stdout_data.strip()))
+        self.output_data.append(u'%s:%s' % (self.names[xccdf_rule], stdout_data.strip()))
         self.current_count += 1
         old_width = self.width_size
         self.width_size -= 21
diff --git a/preupg/script_api.py b/preupg/script_api.py
index a1eef27..f08c9c6 100644
--- a/preupg/script_api.py
+++ b/preupg/script_api.py
@@ -19,7 +19,6 @@ These functions are available:
 * exit_* -- terminate execution with appropriate exit code
 """
 
-from __future__ import unicode_literals, print_function
 import os
 import sys
 import re
@@ -286,7 +285,7 @@ def _log_risk(severity, message):
     """
     log risk level to stderr
     """
-    print("preupg.risk.%s: %s\n" % (severity, message.encode(settings.defenc)), end="", file=sys.stderr)
+    sys.stderr.write("preupg.risk.%s: %s\n" % (severity, message.encode(settings.defenc)))
 
 
 def log_extreme_risk(message):
@@ -338,7 +337,7 @@ def _log(severity, message):
     :param message:message to be logged
     :return:
     """
-    print("preupg.log.%s: %s\n" % (severity, message.encode(settings.defenc)), end="", file=sys.stderr)
+    sys.stderr.write("preupg.log.%s: %s\n" % (severity, message.encode(settings.defenc)))
 
 
 def log_error(message):
@@ -785,13 +784,13 @@ def deploy_hook(*args):
                     exit_error()
                 try:
                     shutil.copytree(arg, hook_arg)
-                except OSError as exc:
+                except OSError, exc:
                     if exc.errno == errno.ENOTDIR:
                         shutil.copyfile(arg, hook_arg)
                     else:
                         log_error("Copying failed: %s" % exc)
                         exit_error()
-        except IOError as e:
+        except IOError, e:
             log_error("Copying of hook script failed: %s" % e)
             exit_error()
 
diff --git a/preupg/settings.py b/preupg/settings.py
index 1ccd0ec..79477c8 100644
--- a/preupg/settings.py
+++ b/preupg/settings.py
@@ -1,4 +1,3 @@
-from __future__ import unicode_literals
 import sys
 import os
 
@@ -8,7 +7,10 @@ if os.path.basename(sys.argv[0]) == "premigrate":
 else:
     prefix = "preupgrade"
 
-defenc = "utf-8" if sys.getdefaultencoding() == "ascii" else sys.getdefaultencoding()
+if sys.getdefaultencoding() == "ascii":
+    defenc = "utf-8"
+else:
+    defenc = sys.getdefaultencoding()
 
 # dir where results of analysis are stored
 assessment_results_dir = os.path.join("/root", prefix)
@@ -24,11 +26,14 @@ result_prefix = "result"
 
 tarball_base = result_prefix + 's'
 tarball_prefix = "preupg_"
-tarball_name = tarball_prefix + tarball_base + "-{0}"
+tarball_name = tarball_prefix + tarball_base + "-%s"
 
 xml_result_name = result_prefix + '.xml'
 html_result_name = result_prefix + '.html'
 
+# OpenSCAP on RHEL 5 supports only the only report style
+old_report_style = True
+
 xsl_sheet = "xccdf-report.xsl"
 
 share_dir = "/usr/share"
@@ -142,10 +147,10 @@ migration_text = "The running system is 32bit. Migration is possible only to 64b
                  "See help --dst-arch option.\n"
 migration_options = ['x86_64', 'ppc64']
 assessment_text = "Assessment of the system, running checks / SCE scripts"
-result_text = "Result table with checks and their results for '{0}':"
+result_text = "Result table with checks and their results for '%s':"
 message = "We found some potential in-place upgrade risks.\n" \
-          "Read the full report file '{0}' for more details."
-converter_message = "At least one of these converters ({0}) needs to be installed."
+          "Read the full report file '%s' for more details."
+converter_message = "At least one of these converters (%s) needs to be installed."
 kickstart_text = "The Preupgrade Assistant generates a kickstart file in '%s'.\n" \
                  "The Kickstart file contains:\n" \
                  "- users with UID/GID which you should create on Red Hat Enterprise Linux 7 system.\n" \
@@ -161,13 +166,13 @@ kickstart_text = "The Preupgrade Assistant generates a kickstart file in '%s'.\n
 
 options_not_allowed = "Options --mode and --select-rules are not allowed together.\n"
 unknown_rules = "These rules do not exist:\n%s\n"
-text_converters = {'w3m': '{0} -T text/html -dump {1} > {2}',
-                   'lynx': '{0} -nonumbers -nolist -force_html -dump -nolist -width=255 {1} > {2}',
-                   'elinks': '{0} --no-references -dump-width 255 --no-numbering -dump {1} > {2}',
+text_converters = {'w3m': '%s -T text/html -dump %s > %s',
+                   'lynx': '%s -nonumbers -nolist -force_html -dump -nolist -width=255 %s > %s',
+                   'elinks': '%s --no-references -dump-width 255 --no-numbering -dump %s > %s',
                    }
 
-ui_command = "preupg -u http://example.com:8099/submit/ -r {0}"
-openssl_command = "openssl x509 -text -in {0} | grep -A1 1.3.6.1.4.1.2312.9.1"
+ui_command = "preupg -u http://example.com:8099/submit/ -r %s"
+openssl_command = "openssl x509 -text -in %s | grep -A1 1.3.6.1.4.1.2312.9.1"
 
 UPGRADE_PATH = ""
 KS_DIR = os.path.join(assessment_results_dir, 'kickstart')
diff --git a/preupg/utils.py b/preupg/utils.py
index 93619e9..c39eaf5 100644
--- a/preupg/utils.py
+++ b/preupg/utils.py
@@ -1,6 +1,4 @@
 # -*- coding: utf-8 -*-
-from __future__ import print_function, unicode_literals
-import six
 import datetime
 import re
 import subprocess
@@ -92,7 +90,7 @@ class FileHelper(object):
         with open mode)
         """
         intern_mode = 0
-        if isinstance(mode, six.text_type):
+        if isinstance(mode, unicode):
             if 'w' in mode or 'a' in mode:
                 intern_mode += W_OK
             if 'r' in mode:
@@ -158,7 +156,7 @@ class FileHelper(object):
         script_types = {'/bin/bash': '.sh',
                         '/usr/bin/python': '.py',
                         '/usr/bin/perl': '.pl'}
-        inter = list(k for k, v in six.iteritems(script_types) if filename.endswith(v))
+        inter = list(k for k, v in script_types.iteritems() if filename.endswith(v))
         content = FileHelper.get_file_content(filename, 'rb')
         if inter and content.startswith('#!'+inter[0]):
             return inter
@@ -187,7 +185,10 @@ class FileHelper(object):
             else:
                 f = codecs.open(full_path, perms)
             try:
-                data = f.read() if not method else f.readlines()
+                if not method:
+                    data = f.read()
+                else:
+                    data = f.readlines()
             finally:
                 f.close()
         except IOError:
@@ -217,7 +218,7 @@ class FileHelper(object):
                     f.writelines(data)
                 else:
                     # TODO: May we should print warn w
-                    if encode_flag is True and isinstance(data, six.text_type):
+                    if encode_flag is True and isinstance(data, unicode):
                         f.write(data.encode(settings.defenc))
                     else:
                         f.write(data)
@@ -366,13 +367,13 @@ class ProcessHelper(object):
                               stderr=subprocess.STDOUT,
                               shell=shell,
                               bufsize=1)
-        stdout = six.binary_type() # FIXME should't be this bytes()?
-        for stdout_data in iter(sp.stdout.readline, b''):
+        stdout = str() # FIXME should't be this bytes()?
+        for stdout_data in iter(sp.stdout.readline, ''):
             # communicate() method buffers everything in memory, we will read stdout directly
             stdout += stdout_data
             if function is None:
                 if print_output:
-                    print (stdout_data, end="")
+                    sys.stdout.write(stdout_data)
                 else:
                     pass
             else:
@@ -491,7 +492,7 @@ class TarballHelper(object):
 
     @staticmethod
     def _get_tarball_name(result_file, time):
-        return result_file.format(time)
+        return result_file % time
 
     @staticmethod
     def _get_tarball_result_path(root_dir, filename):
@@ -671,7 +672,7 @@ class PostupgradeHelper(object):
     def get_hash_file(filename, hasher):
         """Function gets a hash from file"""
         content = FileHelper.get_file_content(filename, "rb", False, False)
-        hasher.update(b'preupgrade-assistant' + content)
+        hasher.update('preupgrade-assistant' + content)
         return hasher.hexdigest()
 
     @staticmethod
@@ -698,7 +699,7 @@ class PostupgradeHelper(object):
             if interpreter is None:
                 continue
             log_message('Executing script %s' % scr)
-            cmd = "{0} {1}".format(interpreter, scr)
+            cmd = "%s %s" % (interpreter, scr)
             ProcessHelper.run_subprocess(cmd, print_output=False, shell=True)
             log_message("Executing script %s ...done" % scr)
 
@@ -770,7 +771,7 @@ class PostupgradeHelper(object):
         postupgrade_dict = {"copy_clean_conf.sh": "z_copy_clean_conf.sh",
                             "postupgrade_hooks.sh": "postupgrade_hooks.sh"}
 
-        for key, val in six.iteritems(postupgrade_dict):
+        for key, val in postupgrade_dict.iteritems():
             source_file = os.path.join(settings.data_dir,
                                        settings.postupgrade_dir, key)
             if os.path.exists(source_file):
diff --git a/preupg/xccdf.py b/preupg/xccdf.py
index cca3988..cc748f8 100644
--- a/preupg/xccdf.py
+++ b/preupg/xccdf.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
-
-from __future__ import unicode_literals
 import re
 import os
-import six
 from operator import itemgetter
-from xml.etree import ElementTree
+try:
+    from xml.etree import ElementTree
+except ImportError:
+    from elementtree import ElementTree
 
 from preupg import settings
 from preupg.settings import ModuleValues
@@ -33,7 +33,7 @@ class XccdfHelper(object):
         }
 
         return_value = -1
-        for key, val in sorted(six.iteritems(risks), key=itemgetter(1), reverse=False):
+        for key, val in sorted(risks.iteritems(), key=itemgetter(1), reverse=False):
             matched = [x for x in inplace_risk if key in x]
             logger_report.debug(matched)
             if matched:
diff --git a/preupg/xml_manager.py b/preupg/xml_manager.py
index 92f3a94..39a438b 100644
--- a/preupg/xml_manager.py
+++ b/preupg/xml_manager.py
@@ -1,13 +1,11 @@
 # -*- coding: utf-8 -*-
 
-from __future__ import unicode_literals, print_function
 import os
 import re
 try:
     import rpm
 except ImportError:
     pass
-import six
 from preupg.utils import FileHelper
 from preupg import settings
 from preupg.logger import logger_report
@@ -53,18 +51,17 @@ def link_update(value, extension, inplace):
         postfix = ' xmlns:html="http://www.w3.org/1999/xhtml/" '
     possible_links = ['http', 'https', 'ftp']
     if [x for x in possible_links if x in value]:
-        return '<{1}a{2}href="{0}">{0}</{1}a>'.format(value.strip(),
-                                                      prefix,
-                                                      postfix)
+        return '<%sa%shref="%s">%s</%sa>' % (prefix, postfix, value.strip(),
+                                             value.strip(), prefix)
     else:
         if inplace:
             return os.path.join('/root', settings.prefix, value.strip())
         if value.strip().startswith("/"):
             return ""
         else:
-            return '<{1}a{2}href="./{0}">{0}</{1}a>'.format(value.strip(),
-                                                            prefix,
-                                                            postfix)
+            return '<%sa%shref="./%s">%s</%sa>' % (prefix, postfix,
+                                                   value.strip(), value.strip(),
+                                                   prefix)
 
 
 def bold_update(value, extension, inplace):
@@ -76,9 +73,8 @@ def bold_update(value, extension, inplace):
     if extension != "html":
         prefix = "html:"
         postfix = ' xmlns:html="http://www.w3.org/1999/xhtml/" '
-    return '<{1}b{2}>{0}</{1}b>'.format(value,
-                                        prefix,
-                                        postfix)
+    return '<%sb%s>%s</%sb>' % (prefix, postfix,
+                                value, prefix)
 
 
 def tag_formating(text, extension):
@@ -127,8 +123,14 @@ def remove_lines(string, regex_t, post_regex_t):
     e_search = re.search(e_re, string)
     if not s_search or not e_search:
         return string
-    s_pos = s_search.start() if remove_start else s_search.end()
-    e_pos = e_search.start() if remove_end else e_search.end()
+    if remove_start:
+        s_pos = s_search.start()
+    else:
+        s_pos = s_search.end()
+    if remove_end:
+        e_pos = e_search.start()
+    else:
+        e_pos = e_search.end()
 
     return string[:s_pos] + string[e_pos:]
 
@@ -259,7 +261,7 @@ class XmlManager(object):
         orig_file = os.path.join(self.dirname,
                                  result_name + "." + extension)
         lines = FileHelper.get_file_content(orig_file, "rb", method=True)
-        for dir_name, files in six.iteritems(solution_files):
+        for dir_name, files in solution_files.iteritems():
             section = dir_name.replace(os.path.join(self.dirname, self.scenario),
                                        "").replace("/", "_")
             solution_text = section + "_SOLUTION_MSG"
diff --git a/preupg/xmlgen/compose.py b/preupg/xmlgen/compose.py
index 4ab16d2..3d2cafc 100644
--- a/preupg/xmlgen/compose.py
+++ b/preupg/xmlgen/compose.py
@@ -1,11 +1,10 @@
-from __future__ import print_function, unicode_literals
 import os
+from posixpath import commonprefix, abspath, curdir, sep, pardir, join
 import sys
 import re
 import datetime
 import shutil
 
-import six
 from distutils import dir_util
 
 from preupg.utils import FileHelper, SystemIdentification
@@ -29,6 +28,20 @@ XCCDF_FRAGMENT = "{http://fedorahosted.org/sce-community-content/wiki/" \
 SCE = "http://open-scap.org/page/SCE"
 
 
+def relpath(path, start=os.curdir):
+    """Return a relative version of a path"""
+    if not path:
+        raise ValueError("no path specified")
+    start_list = abspath(start).split(sep)
+    path_list = abspath(path).split(sep)
+    # Work out how much of the filepath is shared by start and path.
+    i = len(commonprefix([start_list, path_list]))
+    rel_list = [pardir] * (len(start_list)-i) + path_list[i:]
+    if not rel_list:
+        return os.curdir
+    return join(*rel_list)
+
+
 class XCCDFCompose(object):
     dir_name = ""
     result_dir = ""
@@ -115,14 +128,14 @@ class ComposeXML(object):
                                 ComposeXML.collect_group_xmls(new_dir,
                                 level=level + 1,
                                 generate_from_ini=generate_from_ini))
-            except ParseError as e:
+            except ParseError, e:
                 print ("Encountered a parse error in file ", group_file_path,
                        " details: ", e)
         return ret
 
     @staticmethod
     def perform_autoqa(path_prefix, group_tree):
-        for f, t in six.iteritems(group_tree):
+        for f, t in group_tree.iteritems():
             b_subgroups = True
             try:
                 tree, subgroups = t
@@ -180,12 +193,12 @@ class ComposeXML(object):
 
     @staticmethod
     def repath_group_xml_tree(source_dir, new_base_dir, group_tree):
-        for f, t in six.iteritems(group_tree):
+        for f, t in group_tree.iteritems():
             tree, subgroups = t
 
             old_base_dir = os.path.join(source_dir, f)
 
-            path_prefix = os.path.relpath(old_base_dir, new_base_dir)
+            path_prefix = relpath(old_base_dir, start=new_base_dir)
             for element in tree.findall(".//" + xccdf.XMLNS +
                                         "check-content-ref"):
                 old_href = element.get("href")
@@ -210,7 +223,7 @@ class ComposeXML(object):
 
         def sort_key(t_key):
             return get_sorting_key_for_tree(group_tree, t_key)
-        for f in sorted(six.iterkeys(group_tree), key=sort_key):
+        for f in sorted(group_tree.iterkeys(), key=sort_key):
             t = group_tree[f]
             tree, subgroups = t
 
diff --git a/preupg/xmlgen/oscap_group_xml.py b/preupg/xmlgen/oscap_group_xml.py
index c7b3883..b400557 100644
--- a/preupg/xmlgen/oscap_group_xml.py
+++ b/preupg/xmlgen/oscap_group_xml.py
@@ -3,8 +3,6 @@
 This class will ready the YAML file as INI file.
 So no change is needed from maintainer point of view
 """
-
-from __future__ import print_function, unicode_literals
 import os
-import six
 import codecs
 
 try:
@@ -79,7 +77,7 @@ class OscapGroupXml(object):
         # load content without decoding to unicode - ElementTree requests this
         try:
             self.ret[self.dirname] = (ElementTree.parse(os.path.join(self.dirname, "group.xml")).getroot())
-        except ParseError as par_err:
+        except ParseError, par_err:
             print("Encountered a parse error in file ", self.dirname, " details: ", par_err)
         return self.ret
 
@@ -92,7 +90,7 @@ class OscapGroupXml(object):
         file_name = os.path.join(self.dirname, "group.xml")
         try:
             FileHelper.write_to_file(file_name, "wb", ["%s" % item for item in self.rule])
-        except IOError as ior:
+        except IOError, ior:
             print ('Problem with write data to the file ', file_name, ior.message)
 
     def write_profile_xml(self, target_tree):
@@ -104,7 +102,7 @@ class OscapGroupXml(object):
             # as html entities instead, which are unsusable for us
             data = ElementTree.tostring(target_tree, "utf-8")
             FileHelper.write_to_file(file_name, "wb", data, False)
-        except IOError as ioe:
+        except IOError, ioe:
             print ('Problem with writing to file ', file_name, ioe.message)
 
     def write_list_rules(self):
@@ -115,8 +114,8 @@ class OscapGroupXml(object):
             lines = FileHelper.get_file_content(file_list_rules, "rb", method=True)
         else:
             lines = []
-        for values in six.itervalues(self.loaded):
-            check_script = [v for k, v in six.iteritems(values[0]) if k == 'check_script']
+        for values in iter(self.loaded.values()):
+            check_script = [v for k, v in iter(values[0].items()) if k == 'check_script']
             if check_script:
                 check_script = os.path.splitext(''.join(check_script))[0]
                 lines.append(settings.xccdf_tag + rule_name + '_' + check_script + '\n')
diff --git a/preupg/xmlgen/script_utils.py b/preupg/xmlgen/script_utils.py
index 0cb0d4e..1c5ae29 100644
--- a/preupg/xmlgen/script_utils.py
+++ b/preupg/xmlgen/script_utils.py
@@ -1,5 +1,3 @@
-from __future__ import print_function, unicode_literals
-
 import os
 import re
 
diff --git a/preupg/xmlgen/xml_tags.py b/preupg/xmlgen/xml_tags.py
index 640c978..3969d36 100644
--- a/preupg/xmlgen/xml_tags.py
+++ b/preupg/xmlgen/xml_tags.py
@@ -1,4 +1,3 @@
-from __future__ import unicode_literals
 TAG_GROUP = "xccdf_preupg_group_"
 TAG_VALUE = "xccdf_preupg_value_"
 TAG_RULE = "xccdf_preupg_rule_"
diff --git a/preupg/xmlgen/xml_utils.py b/preupg/xmlgen/xml_utils.py
index d499bf3..75ab242 100644
--- a/preupg/xmlgen/xml_utils.py
+++ b/preupg/xmlgen/xml_utils.py
@@ -2,7 +2,6 @@ from __future__ import print_function, unicode_literals
 
 import re
 import os
-import six
 import sys
 import copy
 
@@ -41,13 +40,13 @@ class XmlUtils(object):
         allowed_tags = ['check_script', 'content_description', 'content_title', 'applies_to',
                         'author', 'binary_req', 'solution', 'bugzilla', 'config_file',
                         'group_title', 'mode', 'requires', 'solution_type']
-        for ini, content in six.iteritems(test_dict):
+        for ini, content in iter(test_dict.items()):
             content_dict = content[0]
             for tag in allowed_tags:
                 if tag in content_dict:
                     del content_dict[tag]
             if content_dict:
-                tags = ','. join(six.iterkeys(content_dict))
+                tags = ','. join(iter(content_dict.keys()))
                 sys.stderr.write("Warning: The tag(s) '%s' not allowed in INI"
                                  " file %s.\nAllowed tags are %s.\n"
                                  % (tags, ini, ', '.join(allowed_tags)))
@@ -73,23 +72,23 @@ class XmlUtils(object):
         new_text = []
         lines = FileHelper.get_file_content(os.path.join(self.dirname, filename), "rb", True)
 
-        bold = '<xhtml:b>{0}</xhtml:b>'
+        bold = '<xhtml:b>%s</xhtml:b>'
         br = '<xhtml:br/>'
         table_begin = '<xhtml:table>'
         table_end = '</xhtml:table>'
         table_header = '<xhtml:tr><xhtml:th>Result</xhtml:th><xhtml:th>Description</xhtml:th></xhtml:tr>'
-        table_row = '<xhtml:tr><xhtml:td>{0}</xhtml:td><xhtml:td>{1}</xhtml:td></xhtml:tr>'
-        new_text.append(br + br + '\n' + bold.format('Details:') + br)
+        table_row = '<xhtml:tr><xhtml:td>%s</xhtml:td><xhtml:td>%s</xhtml:td></xhtml:tr>'
+        new_text.append(br + br + '\n' + bold % 'Details:' + br)
         results = False
         for line in lines:
             if '=' in line:
                 if not results:
-                    new_text.append(bold.format('Expected results:') + br)
+                    new_text.append(bold % 'Expected results:' + br)
                     new_text.append(table_begin + '\n' + table_header)
                     results = True
                 try:
                     exp_results = line.strip().split('=')
-                    new_text.append(table_row.format(exp_results[0], exp_results[1]) + '\n')
+                    new_text.append(table_row % (exp_results[0], exp_results[1]) + '\n')
                 except IndexError:
                     pass
             else:
@@ -266,9 +265,9 @@ class XmlUtils(object):
         :return:
         """
 
-        content = "{rule}{main_dir}_{name}".format(rule=xml_tags.TAG_RULE,
-                                                   main_dir='_'.join(get_full_xml_tag(self.dirname)),
-                                                   name=key.split('.')[0])
+        content = "%s%s_%s" % (xml_tags.TAG_RULE,
+                               '_'.join(get_full_xml_tag(self.dirname)),
+                               key.split('.')[0])
         if not name:
             self.update_files('migrate', content)
             self.update_files('upgrade', content)
@@ -331,7 +330,7 @@ class XmlUtils(object):
             self.update_values_list(self.rule, "{check_export}", ''.join(check_export_tag))
             self.update_values_list(self.rule, "{group_value}", ''.join(value_tag))
 
-            for k, function in six.iteritems(update_fnc):
+            for k, function in iter(update_fnc.items()):
                 try:
                     function(key, k)
-                    except IOError as e:
+                except IOError, e:
                     e_title = "Wrong value for tag '%s' in INI file '%s'\n" % (k, main)
                     e_msg = "'%s': %s" % (key[k], e.strerror)
                     MessageHelper.print_error_msg(title=e_title, msg=e_msg)
diff --git a/tools/preupg-create-group-xml b/tools/preupg-create-group-xml
index ff7e5b0..544c74e 100755
--- a/tools/preupg-create-group-xml
+++ b/tools/preupg-create-group-xml
@@ -1,5 +1,4 @@
 #!/usr/bin/python2
-from __future__ import print_function
 import os
 import sys
 import optparse
@@ -36,11 +35,12 @@ def main():
         print('Dir %s does not exists.' % args[0])
         sys.exit(1)
 
+    formatter = logging.Formatter("%(asctime)s %(levelname)s\t%(filename)s"
+                                  ":%(lineno)s %(message)s")
     try:
         LoggerHelper.add_file_handler(logger_debug,
                                       settings.preupg_log,
-                                      formatter=logging.Formatter("%(asctime)s %(levelname)s\t%(filename)s"
-                                                                  ":%(lineno)s %(funcName)s: %(message)s"),
+                                      formatter=formatter,
                                       level=logging.DEBUG)
     except (IOError, OSError):
         logger.warning("Can not create debug log '%s'" % settings.preupg_log)
diff --git a/tools/preupg-xccdf-compose b/tools/preupg-xccdf-compose
index 2ac5897..81f56cb 100755
--- a/tools/preupg-xccdf-compose
+++ b/tools/preupg-xccdf-compose
@@ -1,5 +1,4 @@
 #!/usr/bin/python2
-from __future__ import print_function
 import optparse
 import os
 import shutil
